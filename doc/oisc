subleq

C == 0 means next instruction
C == 1 means ???

Registers/constants for A and B
-1
0
1

X - callee-saved
Y - caller-saved
Z - callee-saved

Internal instruction representation, assuming balanced ternary:

aa bb m c_ccc_ccc_ccc

aa is always a dest
bb is src or constant

aa,bb
|x: register
0x: constant
-x: register lookup

m
|: branch absolute
0: branch relative
-: branch lookup


mov a, 0x0
a a 0

mov a, b
a a 0
a b 0
a 0 0

xchng a, b
X X 0 ; 0, A, B
X a 0 ; -A, A, B
a a 0 ; -A, 0, B
a b 0 ; -A, -B, B
a 0 0 ; -A, B, B
b b 0 ; -A, B, 0
b X 0 ; -A, B, A

sla a
X X 0 ; 0, A
X a 0 ; -A, A
X a 0 ; -2A, A
a X 0 ; -2A, 3A

sra a
X X 0 ; 0, A
A 1 0 ; 0, A-1
A 1 0 ; 0, A-2
A 1 +1 ; 0, A-3
X 1 -4 ; -1, A-3
A A 0 ; -A/3, 0
A X 0 ; -A/3, A/3

imul a, 2
X X 0 ; 0, A
X a 0 ; -A, A
a X 0 ; -A, 2A

idiv a, 2
X X 0 ; 0, A
A 1 0 ; 0, A-1
A 1 +1 ; 0, A-2
X 1 -3 ; -1, A-2
A A 0 ; -A/2, 0
A X 0 ; -A/2, A/2


neg a
a 0 0

add a, b
X X 0
X b 0
a X 0

mod a, b
X X 0
a b +1
X X -2
X b 0
a b 0

jlt a, b, c ; if(a < b) goto c;
X X 0 ; 0, A, B
X a 0 ; -A, A, B
X 1 0 ; -A-1, A, B
X 0 0 ; A+1, A, B
X b c ; A-B+1, A, B

jeq a, b, c ; if(a == b) goto c;
X X 0 ; 0, A, B
X a 0 ; -A, A, B
X 0 0 ; A, A, B
X b +1 ; A-B, A, B
X X +1 ; 0, A, B
X 0 c ; B-A, A, B

jz a, c ; if(a == 0) goto c;
a 0 +1 ; -A
a 0 +1 ; A
a 0 c  ; A

imul a, b ; a = a*b
X X 0 ; 0, A, B
X a 0 ; -A, A, B
a a 0 ; -A, 0, B
X 0 +2 ; A, 0, B
a b 0 ; A, -B, B
X 1 -2 ; A-1, -B, B
a 0 0 ; 0, B*A, B

imul a, b ; a = a*b (Peasant method)
X X 0 ; 0, Y, A, B
Y Y 0 ; 0, 0, A, B

idiv a, b ; a = a/b
X X 0 ; 0, A, B
X a 0 ; -A, A, B
X 0 0 ; A, A, B
X a +1 ; A-B, A, B
a a +1 ; A-B, 0, B
a a +3 ; A-B, 0, B
a 1 0 ; A-B, -1, B
X b +1 ; A-B-B..., -1, B
a 1 -2 ; A-B-B..., -1-1..., B
a 0 0 ; A-B-B..., +1+1..., B

sum_to_n a
X X 0 ; 0, A
X a 0 ; -A, A
a 1 +1 ; -A, A-1
X a -2 ; -A-(A-1)-..., A-1
a X 0 ; -A..., A...


Two constants: 0, -1
Registers: x
instruction_pointer

subleq dst, src, loc

ADD a += b
	subleq x x ; x = 0
	subleq x b ; x = -b
	subleq a x ; a -= -b

SUB a -= b
	subleq a b ; a = a-b

MOV a = b
	subleq x x ; x = 0
	subleq x b ; x = -b
	subleq a a ; a = 0
	subleq a x ; a = b

NEG a = -a
	subleq x x ; x = 0
	subleq x a ; x = -a
	subleq a a ; a = 0
	subleq a x ; a = -a

JMP goto a
	subleq . . a

BEQZ if a == 0 goto c
	subleq x x   ; x = 0
	subleq a x +2; a -= 0; if a <= 0 GOTO TEST
	subleq . . +2; goto END
	subleq x a  c; TEST: x = -a; if x <= 0 GOTO c
	             ; END:

BNEZ if a != 0 goto c
	subleq x x   ; x = 0
	subleq a x +2; a -= 0; if a <= 0 GOTO TEST
	subleq . .  c; goto C
	subleq x a +2; TEST: x = -a; if x <= 0 GOTO END
	subleq . .  c; goto C
	             ; END:

BGTZ if a > 0 goto c
	subleq x  x   ; x = 0
	subleq x  a   ; x = -A
	subleq x -1  c; x = -A + 1; if -(A-1) <= 0 GOTO C

BEQ if A == B goto C
	subleq x x   ; x = 0
	subleq x a   ; x = -A
	subleq a b +2; a -= B; if (A-B) <= 0 GOTO TEST
	subleq a a +8; a = 0; GOTO END
	subleq a a   ; TEST: a = 0
	subleq a x   ; a = A
	subleq x x   ; x = 0
	subleq x b   ; x = -B
	subleq b a  c; b -= A; if (B-A) <= 0 GOTO C
	subleq b b   ; b = 0
	subleq b x   ; b = -(-B)
	             ; END:

	subleq a x   ; END: a = -(-A)

	; This requires another register, for 8 instructions, and sets a=0 if A=B
	subleq y y   ; y = 0
	subleq x x   ; x = 0
	subleq x a   ; x = -A
	subleq a b +2; a -= B; if (A-B) <= 0 GOTO TEST
	subleq a a +3; a = 0; GOTO END
	subleq y a  c; TEST: y = -(A-B); if -(A-B) <= 0 GOTO C
	subleq a a   ; a = 0
	subleq a x   ; END: a = -(-A)

MUL a *= b
	BEQZ   a . +F; if a == 0 GOTO END
	BNEZ   b . +2; if b != 0 GOTO CHKNEG
	subleq a a +F; a = 0; GOTO END
	BGTZ   b . +3; CHKNEG: if b > 0 GOTO MULT
	NEG    a .   ;
	NEG    b .   ;
	subleq x x   ; MULT: x = 0
	subleq x a   ; x = -A
	subleq a a   ; a = 0
	subleq y y   ; y = 0
	subleq y b   ; y = -B
	subleq a x   ; ADD: a -= -A
	subleq b 1 +2; b -= 1; if b == 0 GOTO RESETB
	subleq . . -2; GOTO ADD
	subleq b y   ; RESETB: b = -(-B)
	             ; END:

DIV c = a / b

NOT c = !a

MOD a %= b
	subleq x x   ; x = 0
	subleq a b +2; LOOP: a -= b; if a <= 0 GOTO CHKZER
	subleq x x -1; x = 0; goto LOOP
	subleq x a +4; CHKZER: x = -a; if a == 0 GOTO END
	subleq x x   ; x = 0
	subleq x b   ; x = -b
	subleq a b   ; a += b
	             ; END:


32-bit word

1        11             111
reg,mem  reg,mem,const  @reg,mem,offset,ignor,constant

Need more registers?
00000000 00000000 00000000 00000000
